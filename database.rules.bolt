path / {
  read() { true }
  write() { false }
}

path /songs/{song_key} is Song;

type Song{
  validate() { isSnakeCase(key()) }
  name: String
  teams: Map<TeamID, True>
  lives: Map<LiveID, True>
}

path /characters/{character_key} is Character;

type Character{
  validate() { isSnakeCase(key()) }
  name: String
  teams: Map<TeamID, True>
}

path /teams/{team_key} is Team;

type Team{
  validate() { isSnakeCase(key()) }
  name: String
  members: Map<CharacterID, True>
  songs: Map<SongID, True>
  mds: Map<MdID, True>
}

path /mds/{md_key} is Md;

type Md{
  validate() { isSnakeCase(key()) }
  name: String
  team: TeamID
  Lives: Map<LiveID, True>
}

path /series/{series_key} is Series;

type Series{
  validate() { isSnakeCase(key()) }
  start_at: Date
  end_at: Date
  episodes : Map<NumberString, EpisodeID>
}

path /episodes/{episode_key} is Episode;

type Episode{
  validate() { isSnakeCase(key()) }
  number: Number
  series: SeriesID
  title : String
}

path /brands/{brand_key} is Brand;

type Brand{
  validate() { isSnakeCase(key()) }
  name: String
  coordinates : Map<CoordinateID, True>
}

path /coordinates/{coordinate_key} is Coordinate;

type Coordinate{
  validate() { isSnakeCase(key()) }
  name: String
  brand: BrandID
  Character: CharacterID
}

path /lives/{live_key} is Live;

type Live{
  validate() { isSnakeCase(key()) }
  md: String
  coordinates : Map<CoordinateID, True>
  episode: EpisodeID
  song: SongID
  team: TeamID
}

/* Types */

type True extends Boolean{
  validate() { this }
}

type SnakeCase extends String{
  validate() { isSnakaCase(this) }
}

type Date extends String{
  validate() { isDate(this) }
}

type NumberString extends String{
  validate() { isNumberString(this) }
}

function isSnakeCase(val){ return val.matches(/^[a-z_]+$/) }
function isDate(val){ return val.matches(/^(19|20)[0-9][0-9][-\/. ](0[1-9]|1[012])[-\/. ](0[1-9]|[12][0-9]|3[01])$/) }
function isNumberString(val){ return val.matches(/^[0-9]+$/) }

/* ID */

type SongID extends String{
  validate() { return root.songs.hasChild(this) }
}

type CharacterID extends String{
  validate() { return root.characters.hasChild(this) }
}

type TeamID extends String{
  validate() { return root.teams.hasChild(this) }
}

type MdID extends String{
  validate() { return root.mds.hasChild(this) }
}

type SeriesID extends String{
  validate() { return root.series.hasChild(this) }
}

type EpisodeID extends String{
  validate() { return root.episodes.hasChild(this) }
}

type BrandID extends String{
  validate() { return root.brands.hasChild(this) }
}

type CoordinateID extends String{
  validate() { return root.coordinates.hasChild(this) }
}

type LiveID extends String{
  validate() { return root.lives.hasChild(this) }
}